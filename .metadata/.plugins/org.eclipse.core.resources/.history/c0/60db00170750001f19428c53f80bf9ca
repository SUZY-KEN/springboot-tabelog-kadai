package com.example.nagoyameshi.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.nagoyameshi.csv.CsvService;
import com.example.nagoyameshi.csv.DownloadHelper;
import com.example.nagoyameshi.csvData.RestaurantCsvData;
import com.example.nagoyameshi.entity.Favorite;
import com.example.nagoyameshi.entity.Restaurants;
import com.example.nagoyameshi.entity.Review;
import com.example.nagoyameshi.entity.Users;
import com.example.nagoyameshi.form.ReservationForm;
import com.example.nagoyameshi.form.RestaurantCSVForm;
import com.example.nagoyameshi.repository.CategoryRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.repository.ReviewRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.FavoriteService;
import com.example.nagoyameshi.service.ReviewService;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;

@Controller
@RequestMapping("/restaurants")
public class RestaurantController {
	private final  RestaurantRepository restaurantRepository;
	private final CategoryRepository categoryRepository;
	private final ReviewRepository reviewRepository;
	private final ReviewService reviewService;
	private final FavoriteService favoriteService;
	private final CsvService csvService;
	private final DownloadHelper downloadHelper;
	
	public RestaurantController(RestaurantRepository restaurantRepository,
			CategoryRepository categoryRepository,ReviewRepository reviewRepository,ReviewService reviewService,
			FavoriteService favoriteService,CsvService csvService,DownloadHelper downloadHelper)
	{
		this.restaurantRepository=restaurantRepository;
		this.categoryRepository=categoryRepository;
		this.reviewRepository=reviewRepository;
		this.reviewService=reviewService;
		this.favoriteService=favoriteService;
		this.csvService=csvService;
		this.downloadHelper=downloadHelper;
	}
	
	
	@GetMapping
	public String index(@RequestParam(name="nameKeyword",required=false)String nameKeyword,
			@RequestParam(name="category",required=false)Integer category,@RequestParam(name="price",required=false)Integer price,
			@PageableDefault(page=0,size=12,sort="id",direction = Direction.ASC)Pageable pageable,Model model) 
	{
		System.out.println("RestaurantController.indexメソッド");

		
		Page<Restaurants>restaurantsPage;
		

		

		

		
		if(category!=null)
		{
			if(nameKeyword!=null&&!nameKeyword.isEmpty() )
			{
				if(price!=null)
				{
					switch(price)
					{
						case 1:restaurantsPage=restaurantRepository.findByCategoryAndNameLikeOrderByPriceAsc(categoryRepository.getReferenceById(category), "%"+nameKeyword+"%", pageable);
								break;
						default:restaurantsPage=restaurantRepository.findByCategoryAndNameLikeOrderByPriceDesc(categoryRepository.getReferenceById(category), "%"+nameKeyword+"%", pageable);
								break;
						
					}
				}
				else
				{
					restaurantsPage=restaurantRepository.findByCategoryAndNameLike(categoryRepository.getReferenceById(category), "%"+nameKeyword+"%", pageable);
				}
				
			}
			else
			{
				if(price!=null)
				{
					switch(price)
					{
						case 1:restaurantsPage=restaurantRepository.findByCategoryOrderByPriceAsc(categoryRepository.getReferenceById(category), pageable);
								break;
						default:restaurantsPage=restaurantRepository.findByCategoryOrderByPriceDesc(categoryRepository.getReferenceById(category), pageable);
								break;
						
					}
				}
				else
				{
					restaurantsPage=restaurantRepository.findByCategory(categoryRepository.getReferenceById(category), pageable);
				}
				
			}
		}
		else 
		{
			if(nameKeyword!=null&&!nameKeyword.isEmpty() )
			{
				if(price!=null)
				{	
					switch(price)
					{
						case 1:restaurantsPage=restaurantRepository.findByNameLikeOrderByPriceAsc("%"+nameKeyword+"%", pageable);
								break;
						default:restaurantsPage=restaurantRepository.findByNameLikeOrderByPriceDesc("%"+nameKeyword+"%", pageable);
								break;
								
					}
				}
				else
				{
					restaurantsPage=restaurantRepository.findByNameLike("%"+nameKeyword+"%", pageable);
				}
				
			}	
			else
			{
				if(price!=null)
				{
					switch(price)
					{
						case 1:restaurantsPage=restaurantRepository.findAllByOrderByPriceAsc(pageable);
								break;
						default:restaurantsPage=restaurantRepository.findAllByOrderByPriceDesc(pageable);
							   	break;
						
						
					}
				}
				else
				{
					restaurantsPage=restaurantRepository.findAll(pageable);
				}
			}
		}	
		
		System.out.println("restaurantsPage:"+restaurantsPage);
		
		model.addAttribute("restaurantsPage",restaurantsPage);
		model.addAttribute("nameKeyword",nameKeyword);
		model.addAttribute("category",category);
		model.addAttribute("price",price);
		
		
		model.addAttribute("restaurantCsvForm",new RestaurantCSVForm());
		return "/restaurants/index";
	}
	
	
	@GetMapping("/show/{id}")
	public String show(@PathVariable(name="id")Integer id,Model model,@AuthenticationPrincipal UserDetailsImpl userDetailsImpl) {
		
	//店舗情報の生成
		Restaurants restaurant=restaurantRepository.getReferenceById(id);
		
		
		
		//レビュー情報を渡す&&お気に入り情報を渡す
		Favorite favorite=null;
		 
		boolean hasUserAlreadyReviewed = false;        
        boolean isFavoriteRestaurant=false;
		
         if (userDetailsImpl != null) {
             Users user = userDetailsImpl.getUser();
             
             System.out.println("if:success");
             
         //レビューがあるかの判定
             hasUserAlreadyReviewed = reviewService.hasUserAlreadyReviewed(restaurant, user); 
            
             System.out.println("has:success");
         //お気に入り判定
             isFavoriteRestaurant=favoriteService.isFavoriteRestaurant(user, restaurant);
             System.out.println("is:success");
             
         }
         List<Review> newReviews =reviewRepository.findTop6ByRestaurantsAndEnabledOrderByCreatedAtDesc(restaurant,true) ;
         long totalReviewCount=reviewRepository.countByRestaurantsAndEnabled(restaurant,true);
         
         model.addAttribute("restaurants",restaurant);
         model.addAttribute("reservationForm",new ReservationForm());
         model.addAttribute("hasUserAlreadyReviewed", hasUserAlreadyReviewed);
         model.addAttribute("isFavoriteRestaurant", isFavoriteRestaurant);
         model.addAttribute("favorite",favorite);
         model.addAttribute("newReviews", newReviews);        
         model.addAttribute("totalReviewCount", totalReviewCount);
         
         
        
         System.out.println("show:success");
              
		
		return "restaurants/show";
	}
	
//	会員情報出力
	@PostMapping("/download")
	public ResponseEntity<byte[]> downlodPageall(@ModelAttribute RestaurantCSVForm restaurantCSVForm)
	throws IOException
	{
		
		List<RestaurantCsvData>restaurantCsvDataList=new ArrayList<RestaurantCsvData>();
		
		
		List<Restaurants>restaurantList=restaurantRepository.findAllById(restaurantCSVForm.getRestaurantId());
		
		for(Restaurants restaurant:restaurantList)
		{
			RestaurantCsvData restaurantCsvData=new RestaurantCsvData(restaurant.getName(),restaurant.getAddress(),restaurant.getDescription(),restaurant.getPrice(),
				restaurant.getCategory().getName(),restaurant.getCapacity(),restaurant.getEvaluesDouble(),restaurant.getCreatedAt());
			restaurantCsvDataList.add(restaurantCsvData);
		}
		
		
		
		HttpHeaders headers=new HttpHeaders();
		downloadHelper.addContentDisposition(headers, "restaurants.csv");
		
	    CsvSchema csvSchemaRestaurant = csvService.getCsvHeaderRestaurant();
		
		return new ResponseEntity<byte[]>(csvService.writeCsvTextRestaurant(restaurantCsvDataList,csvSchemaRestaurant).getBytes("MS932"),headers,HttpStatus.OK);
	}
	
}
