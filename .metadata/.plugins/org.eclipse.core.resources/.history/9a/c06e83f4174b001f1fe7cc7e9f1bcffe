package com.example.nagoyameshi.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.nagoyameshi.entity.Reservation;
import com.example.nagoyameshi.entity.Restaurants;
import com.example.nagoyameshi.entity.Users;
import com.example.nagoyameshi.form.ReservationForm;
import com.example.nagoyameshi.repository.ReservationRepository;
import com.example.nagoyameshi.repository.RestaurantRepository;
import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.ReservationService;


@Controller
@RequestMapping("/reservation")
public class ReservationController {
	private final ReservationRepository reservationRepository;
	private final RestaurantRepository restaurantRepository;
	private final ReservationService reservationService;
	
	
	public ReservationController(ReservationRepository reservationRepository,RestaurantRepository restaurantRepository,ReservationService reservationService)
	{
		this.reservationRepository=reservationRepository;
		this.restaurantRepository=restaurantRepository;
		this.reservationService=reservationService;
	}
	
	
	//予約一覧
	@GetMapping("/show")
	public String index(@PageableDefault(page=0,size=10,sort="id")Pageable pageable,
			@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,Model model) 
	{
		Users user=userDetailsImpl.getUser();
		Page<Reservation> reservationPage=reservationRepository.findByUserOrderByCreatedAtDesc(user, pageable);
		
		model.addAttribute("reservationPage",reservationPage);
		return "reservation/show";
	}
	
//	予約登録
	@PostMapping("/create/{restaurantId}")
	public String create(@ModelAttribute @Validated ReservationForm reservationForm,BindingResult bindingResult,
			@PathVariable(name="restaurantId")Integer restaurantId,@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,RedirectAttributes redirectAttributes)
	{
		System.out.println("ReserveCreatinon");
		
		Users user=userDetailsImpl.getUser();
		Restaurants restaurant=restaurantRepository.getReferenceById(restaurantId);
		
		if(bindingResult.hasErrors())
		{
			System.out.println("ReserveCreatinon:faild");
			return "restaurants/show/";
		}
		System.out.println("ReserveCreatinon:success");
		reservationService.create(user, restaurant, reservationForm);
		
		redirectAttributes.addFlashAttribute("successMessage","予約を確定しました。");
		return "redirect:/restaurants/show/{restaurantId}";
	}
	
//	予約キャンセル
	@GetMapping("/cancel/{reservationId}")
	public String cancel(@PathVariable(name="reservationId")Integer reservationId,@AuthenticationPrincipal UserDetailsImpl userDetailsImpl)
	{
		Users user=userDetailsImpl.getUser();
		Restaurants restaurant=restaurantRepository.getReferenceById(reservationId);
		
		reservationService.cancel(user, restaurant);
		
		return "reservation/show";
	}
	
}
