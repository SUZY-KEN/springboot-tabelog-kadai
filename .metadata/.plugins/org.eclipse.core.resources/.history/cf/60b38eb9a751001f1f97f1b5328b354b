package com.example.nagoyameshi.service;

import java.sql.Timestamp;
import java.util.Map;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.nagoyameshi.entity.Roles;
import com.example.nagoyameshi.entity.StripeTokens;
import com.example.nagoyameshi.entity.Users;
import com.example.nagoyameshi.form.EditUserForm;
import com.example.nagoyameshi.form.SignupForm;
import com.example.nagoyameshi.repository.RoleRepository;
import com.example.nagoyameshi.repository.StripeTokensRepository;
import com.example.nagoyameshi.repository.UserRepository;

@Service
public class UserService {
	private final RoleRepository roleRepository;
	private final UserRepository userRepository;
	private final PasswordEncoder passwordEncoder;
	private final StripeTokensRepository stripeTokensRepository;
	
	public UserService(RoleRepository roleRepository,UserRepository userRepository,PasswordEncoder passwordEncoder,StripeTokensRepository stripeTokensRepository)
	{
		this.roleRepository=roleRepository;
		this.userRepository=userRepository;
		this.passwordEncoder=passwordEncoder;
		this.stripeTokensRepository=stripeTokensRepository;
	}

	
	
	//新規登録時
	@Transactional
	public Users create(SignupForm signupForm)
	{
		Users user=new Users();
		Roles role=roleRepository.findByName("ROLE_GENERAL");
		
		user.setName(signupForm.getName());
		user.setEmail(signupForm.getEmail());
		user.setPassword(passwordEncoder.encode(signupForm.getPassword()));
		user.setRole(role);
		user.setEnabled(false);
		
		return userRepository.save(user);
	}
	
	//新規登録時メール整合
	public boolean isEmailRegistered(String email)
	{
		Users user=userRepository.findByEmail(email);
		 return user!=null;
	}
	
	//パスワード整合
	 public boolean isSamePassword(String password, String confirmPassword) {
         return password.equals(confirmPassword);
     } 
	
	 //メール照合
	  @Transactional
	     public void enableUser(Users user) 
	  {
	         user.setEnabled(true); 
         userRepository.save(user);
	  }    
	  
	  
	  //会員情報編集
	  @Transactional
	  public void edit(Users user,EditUserForm editUserForm)
	  {
		  user.setName(editUserForm.getName());
		  user.setEmail(editUserForm.getEmail());
		  
		  userRepository.save(user);
		  
	  }
	  
	  //有料会員登録
	  @Transactional
	  public void subscription(Map<String, String>metadata,String subscriptionId,String customerId)
	  {
		  
		  Integer userId=Integer.parseInt(metadata.get("userId"));
		  Users user=userRepository.getReferenceById(userId);
		  
		  StripeTokens stripeTokens=new StripeTokens();
		  stripeTokens.setUserId(user);
		  stripeTokens.setCustomerId(customerId);
		  stripeTokens.setSubscriptionId(subscriptionId);
		  stripeTokens.setCreatedAt(new Timestamp(System.currentTimeMillis()));
		  stripeTokensRepository.save(stripeTokens);
		  
		  
		  user.setRole(roleRepository.getReferenceById(2));
		  userRepository.save(user);
		  
		 
		  
		  
		  
	  }
	  
	//有料会員削除
	  @Transactional
	  public String disSubscription(Users user)
	  {
		  Users myUser=user;
		  findstripeTokenByUser(myUser);
		  String subscriptionId=stripetoken.getSubscriptionId();
		  
		  stripeTokensRepository.delete(stripetoken);
		  myUser.setRole(roleRepository.getReferenceById(1));
		  userRepository.save(myUser);
		  
		  return subscriptionId;
	  }
	  
	  public StripeTokens findstripeTokenByUser(Users user)
	  {
		  return stripeTokensRepository.findByUserId(user);
	  }
	
}
